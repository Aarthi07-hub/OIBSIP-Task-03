import tkinter as tk
from tkinter import ttk, messagebox
import string
import random
import pyperclip  # For clipboard integration

class PasswordGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")

        # Password length
        self.length_label = tk.Label(root, text="Password Length:")
        self.length_entry = tk.Entry(root, width=5)
        self.length_entry.insert(0, "12")  # Default length

        # Complexity options
        self.complexity_label = tk.Label(root, text="Complexity:")
        self.complexity_var = tk.StringVar()
        self.complexity_combobox = ttk.Combobox(root, textvariable=self.complexity_var, values=["Easy", "Medium", "Hard"])
        self.complexity_combobox.set("Medium")

        # Include options
        self.include_label = tk.Label(root, text="Include:")
        self.lowercase_var = tk.BooleanVar(value=True)
        self.uppercase_var = tk.BooleanVar(value=True)
        self.digits_var = tk.BooleanVar(value=True)
        self.symbols_var = tk.BooleanVar(value=True)

        self.lowercase_checkbox = tk.Checkbutton(root, text="Lowercase", variable=self.lowercase_var)
        self.uppercase_checkbox = tk.Checkbutton(root, text="Uppercase", variable=self.uppercase_var)
        self.digits_checkbox = tk.Checkbutton(root, text="Digits", variable=self.digits_var)
        self.symbols_checkbox = tk.Checkbutton(root, text="Symbols", variable=self.symbols_var)

        # Generate button
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)

        # Result
        self.result_label = tk.Label(root, text="Generated Password:")
        self.result_entry = tk.Entry(root, state="readonly", readonlybackground="white")

        # Copy to clipboard button
        self.copy_button = tk.Button(root, text="Copy to Clipboard", command=self.copy_to_clipboard)

        # Grid layout
        self.length_label.grid(row=0, column=0, pady=5, sticky="e")
        self.length_entry.grid(row=0, column=1, pady=5, sticky="w")
        self.complexity_label.grid(row=1, column=0, pady=5, sticky="e")
        self.complexity_combobox.grid(row=1, column=1, pady=5, sticky="w")
        self.include_label.grid(row=2, column=0, pady=5, sticky="e")
        self.lowercase_checkbox.grid(row=2, column=1, pady=5, sticky="w")
        self.uppercase_checkbox.grid(row=3, column=1, pady=5, sticky="w")
        self.digits_checkbox.grid(row=4, column=1, pady=5, sticky="w")
        self.symbols_checkbox.grid(row=5, column=1, pady=5, sticky="w")
        self.generate_button.grid(row=6, column=0, columnspan=2, pady=10)
        self.result_label.grid(row=7, column=0, pady=5, sticky="e")
        self.result_entry.grid(row=7, column=1, pady=5, sticky="w")
        self.copy_button.grid(row=8, column=0, columnspan=2, pady=10)

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
        except ValueError:
            messagebox.showerror("Error", "Invalid password length. Please enter a valid number.")
            return

        if length <= 0:
            messagebox.showerror("Error", "Password length must be greater than zero.")
            return

        include_chars = ""
        if self.lowercase_var.get():
            include_chars += string.ascii_lowercase
        if self.uppercase_var.get():
            include_chars += string.ascii_uppercase
        if self.digits_var.get():
            include_chars += string.digits
        if self.symbols_var.get():
            include_chars += string.punctuation

        if not include_chars:
            messagebox.showerror("Error", "Select at least one character type for inclusion.")
            return

        password = "".join(random.choice(include_chars) for _ in range(length))
        self.result_entry.config(state="normal")
        self.result_entry.delete(0, tk.END)
        self.result_entry.insert(0, password)
        self.result_entry.config(state="readonly")

    def copy_to_clipboard(self):
        password = self.result_entry.get()
        if password:
            pyperclip.copy(password)
            messagebox.showinfo("Clipboard", "Password copied to clipboard.")
        else:
            messagebox.showerror("Error", "No password generated yet.")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGenerator(root)
    root.mainloop()
